# -*- coding: utf-8 -*-
#from . import helpers

import re
import urllib.request
from bs4 import BeautifulSoup
from user_agent import generate_user_agent
import sqlite3
import random


def get_song_lyrics_az(artist, song_title):
    """Made artist and song title lower"""
    artist =  artist.lower()
    song_title = song_title.lower()
    #remove every special caracter except alphanumeric from artist and song title
    artist = re.sub('[^A-Za-z0-9]+', "", artist)
    song_title = re.sub('[^A-Za-z0-9]+', "", song_title)
    if artist.startswith("the"):    # remove starting 'the' from artist e.g. the who -> who
        artist = artist[3:]
    #Making URLS    
    azurl = "http://azlyrics.com/lyrics/"+artist+"/"+song_title+".html"
    print(azurl)
    lyrics = "NA"
    try:
    	#AZLYRICS PROCESSING
        content = urllib.request.urlopen(azurl).read()
        soup = BeautifulSoup(content, 'html.parser')
        lyrics = str(soup)
        if(len(lyrics)==0):
            return "NA"
        # lyrics lies between up_partition and down_partition
        up_partition = '<!-- Usage of azlyrics.com content by any third-party lyrics provider is prohibited by our licensing agreement. Sorry about that. -->'
        down_partition = '<!-- MxM banner -->'
        lyrics = lyrics.split(up_partition)[1]
        lyrics = lyrics.split(down_partition)[0]
        lyrics = lyrics.replace('<br>','').replace('<br/>','').replace('</div>','').strip()
        return lyrics
    except Exception as e:
        #TODO: store error in database for lesson learned, return NA
        #return "Exception occurred \n" +str(e)
        return "NA"


def get_song_lyrics_metro(artist, song_title):
    """Made artist and song title lower"""
    artist =  artist.lower()
    artist2 = artist.replace(' ', '-')
    song_title = song_title.lower()
    #remove every special caracter except alphanumeric from artist and song title
    artist = re.sub('[^A-Za-z0-9]+', "", artist)
    song_title = re.sub('[^A-Za-z0-9]+', "", song_title)
    if artist2.startswith("the_"):    # remove starting 'the' from artist e.g. the who -> who
        artist2 = artist2[4:]
    #Making URLS    
    
    metrourl = "http://metrolyrics.com/"+song_title+"-lyrics-"+artist2+".html"
    print(metrourl)
    lyrics = "NA"
    try:
        #METROLYRICS PROCESSING
        content = urllib.request.urlopen(metrourl).read()
        soup = BeautifulSoup(content, 'html.parser')
        lyrics = str(soup)
        # lyrics lies divided in three sections 
        first_section = '<!-- First Section -->'
        widget_related = '<!--WIDGET - RELATED-->'
        second_section = '<!-- Second Section -->'
        widget_photos = '<!--WIDGET - PHOTOS-->'
        third_section = '<!-- Third Section -->'
        bottom_mpu = '<!--BOTTOM MPU-->'
        lyrics = lyrics.split(first_section)[1]
        first_section = lyrics.split(widget_related)[0]
        lyrics = lyrics.split(widget_related)[1]
        lyrics = lyrics.split(second_section)[1]
        second_section = lyrics.split(widget_photos)[0]
        lyrics = lyrics.split(widget_photos)[1]
        lyrics = lyrics.split(third_section)[1]
        third_section = lyrics.split(bottom_mpu)[0]
        
        lyrics = first_section+"\t"+ second_section +"\t"+third_section
        lyrics = lyrics.replace('<p class="verse">','').replace('<br/>','').replace('</p>','').strip()
        return lyrics
    except Exception as e:
        #TODO: store error in database for lesson learned, return NA
        #return "Exception occurred \n" +str(e)
        return "NA"
           

def get_song_lyrics_song(artist, song_title):
    """Made artist and song title lower"""
    artist =  artist.lower()
    artist2 = artist.replace(' ', '-')
    song_title = song_title.lower()
    #remove every special caracter except alphanumeric from artist and song title
    artist = re.sub('[^A-Za-z0-9]+', "", artist)
    song_title = re.sub('[^A-Za-z0-9]+', "", song_title)
    if artist2.startswith("the_"):    # remove starting 'the' from artist e.g. the who -> who
        artist2 = artist2[4:]
    #Making URLS    
    songurl = "http://songlyrics.com/"+artist2+"/"+song_title+"-lyrics/"
    print(songurl)
    lyrics = "NA"
    try:
        #SONGSLYRICS PROCESSING
        headers = {'User-Agent': generate_user_agent(device_type="desktop", os=('mac', 'linux'))}
        #print(headers)
        req = urllib.request.Request(songurl,None,headers)
        content = urllib.request.urlopen(req).read()
        soup = BeautifulSoup(content, 'html.parser')
         # lyrics lies within the p tag with id = songLyricsDiv
        letra = soup.find_all("p", {"id":"songLyricsDiv"})
        lyrics= str(letra[0])
        lyrics = lyrics.replace('<p class="songLyricsV14 iComment-text" id="songLyricsDiv">','').replace('<br/>','').replace('</p>','').strip()
        return lyrics
    except Exception as e:
        #TODO: store error in database for lesson learned, return NA
        #return "Exception occurred \n" +str(e)
        return "NA"    

def get_song_lyrics_mode(artist, song_title):
    """Made artist and song title lower"""
    artist =  artist.lower()
    artist3 = artist.replace(' ','_')
    song_title = song_title.lower()
    #remove every special caracter except alphanumeric from artist and song title
    artist = re.sub('[^A-Za-z0-9]+', "", artist)
    song_title = re.sub('[^A-Za-z0-9]+', "", song_title)
    if artist3.startswith("the_"):    # remove starting 'the' from artist e.g. the who -> who
        artist3 = artist3[4:]
    #Making URLS    
    modeurl = "http://www.lyricsmode.com/lyrics/"+artist[:1]+"/"+artist3+"/"+song_title+".html"
    print(modeurl)
    lyrics = "NA"
    try:
        #LYRICSMODE PROCESSING
        headers = {'User-Agent': generate_user_agent(device_type="desktop", os=('mac', 'linux'))}
        #print(headers)
        req = urllib.request.Request(modeurl,None,headers)
        content = urllib.request.urlopen(req).read()
        soup = BeautifulSoup(content, 'html.parser')
        lyrics = str(soup)
        # lyrics lies within the p tag with id = songLyricsDiv
        letra = soup.find_all("p", {"id":"lyrics_text"})
        lyrics= str(letra[0])
        lyrics = lyrics.replace('<p class="ui-annotatable" id="lyrics_text">','').replace('<br/>','').replace('</p>','').strip()
        return lyrics
    except Exception as e:
        #TODO: store error in database for lesson learned, return NA
        #return "Exception occurred \n" +str(e)
        return "NA"

def database_conn():
    try:
        sqlite_file = '/georgetown/ds/data/MusicMood.db'
        conn = sqlite3.connect(sqlite_file)
        return conn
    except Exception as e:
        return "Exception occurred \n" +str(e)

def choosepath(row):
    #param row contains: rowid, trackid, song, artist, year  in that order
    path = random.randint(1,4)
    lyric = "NA"
    if(path==1):
        lyric = get_song_lyrics_az(row[3],row[2])
        if(lyric=="NA"):
            lyric = get_song_lyrics_metro(row[3],row[2])
            if(lyric=="NA"):
                lyric = get_song_lyrics_song(row[3],row[2])
                if(lyric=="NA"):
                    lyric = get_song_lyrics_mode(row[3],row[2])
                else:
                    return lyric
            else:
                return lyric
        else:
            return lyric        
    elif(path==2):
        lyric = get_song_lyrics_metro(row[3],row[2])
        if(lyric=="NA"):
            lyric = get_song_lyrics_az(row[3],row[2])
            if(lyric=="NA"):
                lyric = get_song_lyrics_song(row[3],row[2])
                if(lyric=="NA"):
                    lyric = get_song_lyrics_mode(row[3],row[2])
                else:
                    return lyric
            else:
                return lyric
        else:
            return lyric
    elif(path==3):
        lyric = get_song_lyrics_song(row[3],row[2])
        if(lyric=="NA"):
            lyric = get_song_lyrics_az(row[3],row[2])
            if(lyric=="NA"):
                lyric = get_song_lyrics_metro(row[3],row[2])
                if(lyric=="NA"):
                    lyric = get_song_lyrics_mode(row[3],row[2])
                else:
                    return lyric
            else:
                return lyric
        else:
            return lyric
    elif(path==4):
        lyric = get_song_lyrics_mode(row[3],row[2])
        if(lyric=="NA"):
            lyric = get_song_lyrics_az(row[3],row[2])
            if(lyric=="NA"):
                lyric = get_song_lyrics_metro(row[3],row[2])
                if(lyric=="NA"):
                    lyric = get_song_lyrics_song(row[3],row[2])
                else:
                    return lyric
            else:
                return lyric
        else:
            return lyric
    else:
        return "NA"        

def ifnull(var, val):
  if var is None:
    return val
  return var

def main():    
    min_limit = 80
    max_limit = 90
	#Load song names and artists from  SQLite
    db = database_conn()
    c = db.cursor()
    c.execute('SELECT rowid, trackid, song, artist, year from songs_dataset where rowid between {min_limit} and {max_limit} order by year desc'.\
        format(min_limit=min_limit, max_limit=max_limit))
    rows = c.fetchall()
    #Iterate through all the songs getting the lyrics
    for row in rows:
            print(row[2]+" by "+row[3])
            print(choosepath(row))
    #print(get_song_lyrics_mode("Paramore","Monster"))
	#Insert lyrics in Database
    

if __name__ == '__main__':
	main()

